<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Enums\Models
 */

namespace Inktweb\Bolcom\RetailerApi\Enums\Models\V7\Retailer\UploadReportAttribute;

use Inktweb\Bolcom\RetailerApi\Contracts\Enum;

class SubStatus extends Enum
{
    protected const MAX_ITEMS = 1;
    public const BLOCKED_BY_RATE_LIMITER = 'BLOCKED_BY_RATE_LIMITER';
    public const CREATED = 'CREATED';
    public const DEPRECATED = 'DEPRECATED';
    public const IDENTICAL_VALUE_AS_BEFORE = 'IDENTICAL_VALUE_AS_BEFORE';
    public const MATCH_TO_PRODUCT_FAILED = 'MATCH_TO_PRODUCT_FAILED';
    public const NOT_CHANGED = 'NOT_CHANGED';
    public const NOT_RECENT = 'NOT_RECENT';
    public const PROCESSING_STARTED = 'PROCESSING_STARTED';
    public const RECEIVED = 'RECEIVED';
    public const REJECTED = 'REJECTED';
    public const REJECTED_BY_BRAND_AUTHORITY = 'REJECTED_BY_BRAND_AUTHORITY';
    public const REJECTED_BY_LOGISTIC = 'REJECTED_BY_LOGISTIC';
    public const REJECTED_NO_DATA = 'REJECTED_NO_DATA';
    public const REJECTED_UNPROCESSABLE = 'REJECTED_UNPROCESSABLE';
    public const SELECTED = 'SELECTED';
    public const SELECTED_BY_BRAND_AUTHORITY = 'SELECTED_BY_BRAND_AUTHORITY';
    public const SELECTED_BY_LOGISTIC = 'SELECTED_BY_LOGISTIC';
    public const SELECTION_DELETED = 'SELECTION_DELETED';
    public const SELECTION_MERGED = 'SELECTION_MERGED';
    public const TIMED_OUT = 'TIMED_OUT';
    public const UPDATED = 'UPDATED';
    public const UPLOADED = 'UPLOADED';
    public const UNKNOWN = 'UNKNOWN';
    public const VALID_EAN = 'VALID_EAN';
    public const VALIDATED = 'VALIDATED';
    public const VALIDATION_FAILED = 'VALIDATION_FAILED';
    public const VALIDATION_FAILED_DISABLED_GPC_CODE = 'VALIDATION_FAILED_DISABLED_GPC_CODE';
    public const VALIDATION_FAILED_DOES_NOT_EXIST = 'VALIDATION_FAILED_DOES_NOT_EXIST';
    public const VALIDATION_FAILED_INVALID_DATE = 'VALIDATION_FAILED_INVALID_DATE';
    public const VALIDATION_FAILED_INVALID_EAN = 'VALIDATION_FAILED_INVALID_EAN';
    public const VALIDATION_FAILED_INVALID_FRACTION = 'VALIDATION_FAILED_INVALID_FRACTION';
    public const VALIDATION_FAILED_INVALID_GPC_CODE = 'VALIDATION_FAILED_INVALID_GPC_CODE';
    public const VALIDATION_FAILED_INVALID_INTEGER = 'VALIDATION_FAILED_INVALID_INTEGER';
    public const VALIDATION_FAILED_INVALID_ISODATE = 'VALIDATION_FAILED_INVALID_ISODATE';
    public const VALIDATION_FAILED_INVALID_ISODATETIME = 'VALIDATION_FAILED_INVALID_ISODATETIME';
    public const VALIDATION_FAILED_INVALID_LOV_VALUE = 'VALIDATION_FAILED_INVALID_LOV_VALUE';
    public const VALIDATION_FAILED_INVALID_MULTIPLE_VALUES = 'VALIDATION_FAILED_INVALID_MULTIPLE_VALUES';
    public const VALIDATION_FAILED_INVALID_NO_VALUES = 'VALIDATION_FAILED_INVALID_NO_VALUES';
    public const VALIDATION_FAILED_INVALID_NUMBER = 'VALIDATION_FAILED_INVALID_NUMBER';
    public const VALIDATION_FAILED_INVALID_NUMERIC_TEXT = 'VALIDATION_FAILED_INVALID_NUMERIC_TEXT';
    public const VALIDATION_FAILED_INVALID_TEXT = 'VALIDATION_FAILED_INVALID_TEXT';
    public const VALIDATION_FAILED_INVALID_UNIT = 'VALIDATION_FAILED_INVALID_UNIT';
    public const VALIDATION_FAILED_INVALID_URL = 'VALIDATION_FAILED_INVALID_URL';
    public const VALIDATION_FAILED_INVALID_VALUES = 'VALIDATION_FAILED_INVALID_VALUES';
    public const VALIDATION_FAILED_NOT_ALLOWED = 'VALIDATION_FAILED_NOT_ALLOWED';
    public const VALIDATION_FAILED_UNKNOWN_BASETYPE = 'VALIDATION_FAILED_UNKNOWN_BASETYPE';
    public const WAITING_FOR_GLOBAL_ID = 'WAITING_FOR_GLOBAL_ID';

    protected array $allowedValues = [
        'BLOCKED_BY_RATE_LIMITER',
        'CREATED',
        'DEPRECATED',
        'IDENTICAL_VALUE_AS_BEFORE',
        'MATCH_TO_PRODUCT_FAILED',
        'NOT_CHANGED',
        'NOT_RECENT',
        'PROCESSING_STARTED',
        'RECEIVED',
        'REJECTED',
        'REJECTED_BY_BRAND_AUTHORITY',
        'REJECTED_BY_LOGISTIC',
        'REJECTED_NO_DATA',
        'REJECTED_UNPROCESSABLE',
        'SELECTED',
        'SELECTED_BY_BRAND_AUTHORITY',
        'SELECTED_BY_LOGISTIC',
        'SELECTION_DELETED',
        'SELECTION_MERGED',
        'TIMED_OUT',
        'UPDATED',
        'UPLOADED',
        'UNKNOWN',
        'VALID_EAN',
        'VALIDATED',
        'VALIDATION_FAILED',
        'VALIDATION_FAILED_DISABLED_GPC_CODE',
        'VALIDATION_FAILED_DOES_NOT_EXIST',
        'VALIDATION_FAILED_INVALID_DATE',
        'VALIDATION_FAILED_INVALID_EAN',
        'VALIDATION_FAILED_INVALID_FRACTION',
        'VALIDATION_FAILED_INVALID_GPC_CODE',
        'VALIDATION_FAILED_INVALID_INTEGER',
        'VALIDATION_FAILED_INVALID_ISODATE',
        'VALIDATION_FAILED_INVALID_ISODATETIME',
        'VALIDATION_FAILED_INVALID_LOV_VALUE',
        'VALIDATION_FAILED_INVALID_MULTIPLE_VALUES',
        'VALIDATION_FAILED_INVALID_NO_VALUES',
        'VALIDATION_FAILED_INVALID_NUMBER',
        'VALIDATION_FAILED_INVALID_NUMERIC_TEXT',
        'VALIDATION_FAILED_INVALID_TEXT',
        'VALIDATION_FAILED_INVALID_UNIT',
        'VALIDATION_FAILED_INVALID_URL',
        'VALIDATION_FAILED_INVALID_VALUES',
        'VALIDATION_FAILED_NOT_ALLOWED',
        'VALIDATION_FAILED_UNKNOWN_BASETYPE',
        'WAITING_FOR_GLOBAL_ID',
    ];

    public static function blockedByRateLimiter(): self
    {
        return (new static())->set(static::BLOCKED_BY_RATE_LIMITER);
    }

    public function isBlockedByRateLimiter(): bool
    {
        return $this->is(static::BLOCKED_BY_RATE_LIMITER);
    }

    public static function created(): self
    {
        return (new static())->set(static::CREATED);
    }

    public function isCreated(): bool
    {
        return $this->is(static::CREATED);
    }

    public static function deprecated(): self
    {
        return (new static())->set(static::DEPRECATED);
    }

    public function isDeprecated(): bool
    {
        return $this->is(static::DEPRECATED);
    }

    public static function identicalValueAsBefore(): self
    {
        return (new static())->set(static::IDENTICAL_VALUE_AS_BEFORE);
    }

    public function isIdenticalValueAsBefore(): bool
    {
        return $this->is(static::IDENTICAL_VALUE_AS_BEFORE);
    }

    public static function matchToProductFailed(): self
    {
        return (new static())->set(static::MATCH_TO_PRODUCT_FAILED);
    }

    public function isMatchToProductFailed(): bool
    {
        return $this->is(static::MATCH_TO_PRODUCT_FAILED);
    }

    public static function notChanged(): self
    {
        return (new static())->set(static::NOT_CHANGED);
    }

    public function isNotChanged(): bool
    {
        return $this->is(static::NOT_CHANGED);
    }

    public static function notRecent(): self
    {
        return (new static())->set(static::NOT_RECENT);
    }

    public function isNotRecent(): bool
    {
        return $this->is(static::NOT_RECENT);
    }

    public static function processingStarted(): self
    {
        return (new static())->set(static::PROCESSING_STARTED);
    }

    public function isProcessingStarted(): bool
    {
        return $this->is(static::PROCESSING_STARTED);
    }

    public static function received(): self
    {
        return (new static())->set(static::RECEIVED);
    }

    public function isReceived(): bool
    {
        return $this->is(static::RECEIVED);
    }

    public static function rejected(): self
    {
        return (new static())->set(static::REJECTED);
    }

    public function isRejected(): bool
    {
        return $this->is(static::REJECTED);
    }

    public static function rejectedByBrandAuthority(): self
    {
        return (new static())->set(static::REJECTED_BY_BRAND_AUTHORITY);
    }

    public function isRejectedByBrandAuthority(): bool
    {
        return $this->is(static::REJECTED_BY_BRAND_AUTHORITY);
    }

    public static function rejectedByLogistic(): self
    {
        return (new static())->set(static::REJECTED_BY_LOGISTIC);
    }

    public function isRejectedByLogistic(): bool
    {
        return $this->is(static::REJECTED_BY_LOGISTIC);
    }

    public static function rejectedNoData(): self
    {
        return (new static())->set(static::REJECTED_NO_DATA);
    }

    public function isRejectedNoData(): bool
    {
        return $this->is(static::REJECTED_NO_DATA);
    }

    public static function rejectedUnprocessable(): self
    {
        return (new static())->set(static::REJECTED_UNPROCESSABLE);
    }

    public function isRejectedUnprocessable(): bool
    {
        return $this->is(static::REJECTED_UNPROCESSABLE);
    }

    public static function selected(): self
    {
        return (new static())->set(static::SELECTED);
    }

    public function isSelected(): bool
    {
        return $this->is(static::SELECTED);
    }

    public static function selectedByBrandAuthority(): self
    {
        return (new static())->set(static::SELECTED_BY_BRAND_AUTHORITY);
    }

    public function isSelectedByBrandAuthority(): bool
    {
        return $this->is(static::SELECTED_BY_BRAND_AUTHORITY);
    }

    public static function selectedByLogistic(): self
    {
        return (new static())->set(static::SELECTED_BY_LOGISTIC);
    }

    public function isSelectedByLogistic(): bool
    {
        return $this->is(static::SELECTED_BY_LOGISTIC);
    }

    public static function selectionDeleted(): self
    {
        return (new static())->set(static::SELECTION_DELETED);
    }

    public function isSelectionDeleted(): bool
    {
        return $this->is(static::SELECTION_DELETED);
    }

    public static function selectionMerged(): self
    {
        return (new static())->set(static::SELECTION_MERGED);
    }

    public function isSelectionMerged(): bool
    {
        return $this->is(static::SELECTION_MERGED);
    }

    public static function timedOut(): self
    {
        return (new static())->set(static::TIMED_OUT);
    }

    public function isTimedOut(): bool
    {
        return $this->is(static::TIMED_OUT);
    }

    public static function updated(): self
    {
        return (new static())->set(static::UPDATED);
    }

    public function isUpdated(): bool
    {
        return $this->is(static::UPDATED);
    }

    public static function uploaded(): self
    {
        return (new static())->set(static::UPLOADED);
    }

    public function isUploaded(): bool
    {
        return $this->is(static::UPLOADED);
    }

    public static function unknown(): self
    {
        return (new static())->set(static::UNKNOWN);
    }

    public function isUnknown(): bool
    {
        return $this->is(static::UNKNOWN);
    }

    public static function validEan(): self
    {
        return (new static())->set(static::VALID_EAN);
    }

    public function isValidEan(): bool
    {
        return $this->is(static::VALID_EAN);
    }

    public static function validated(): self
    {
        return (new static())->set(static::VALIDATED);
    }

    public function isValidated(): bool
    {
        return $this->is(static::VALIDATED);
    }

    public static function validationFailed(): self
    {
        return (new static())->set(static::VALIDATION_FAILED);
    }

    public function isValidationFailed(): bool
    {
        return $this->is(static::VALIDATION_FAILED);
    }

    public static function validationFailedDisabledGpcCode(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_DISABLED_GPC_CODE);
    }

    public function isValidationFailedDisabledGpcCode(): bool
    {
        return $this->is(static::VALIDATION_FAILED_DISABLED_GPC_CODE);
    }

    public static function validationFailedDoesNotExist(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_DOES_NOT_EXIST);
    }

    public function isValidationFailedDoesNotExist(): bool
    {
        return $this->is(static::VALIDATION_FAILED_DOES_NOT_EXIST);
    }

    public static function validationFailedInvalidDate(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_DATE);
    }

    public function isValidationFailedInvalidDate(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_DATE);
    }

    public static function validationFailedInvalidEan(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_EAN);
    }

    public function isValidationFailedInvalidEan(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_EAN);
    }

    public static function validationFailedInvalidFraction(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_FRACTION);
    }

    public function isValidationFailedInvalidFraction(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_FRACTION);
    }

    public static function validationFailedInvalidGpcCode(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_GPC_CODE);
    }

    public function isValidationFailedInvalidGpcCode(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_GPC_CODE);
    }

    public static function validationFailedInvalidInteger(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_INTEGER);
    }

    public function isValidationFailedInvalidInteger(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_INTEGER);
    }

    public static function validationFailedInvalidIsodate(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_ISODATE);
    }

    public function isValidationFailedInvalidIsodate(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_ISODATE);
    }

    public static function validationFailedInvalidIsodatetime(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_ISODATETIME);
    }

    public function isValidationFailedInvalidIsodatetime(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_ISODATETIME);
    }

    public static function validationFailedInvalidLovValue(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_LOV_VALUE);
    }

    public function isValidationFailedInvalidLovValue(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_LOV_VALUE);
    }

    public static function validationFailedInvalidMultipleValues(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_MULTIPLE_VALUES);
    }

    public function isValidationFailedInvalidMultipleValues(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_MULTIPLE_VALUES);
    }

    public static function validationFailedInvalidNoValues(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_NO_VALUES);
    }

    public function isValidationFailedInvalidNoValues(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_NO_VALUES);
    }

    public static function validationFailedInvalidNumber(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_NUMBER);
    }

    public function isValidationFailedInvalidNumber(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_NUMBER);
    }

    public static function validationFailedInvalidNumericText(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_NUMERIC_TEXT);
    }

    public function isValidationFailedInvalidNumericText(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_NUMERIC_TEXT);
    }

    public static function validationFailedInvalidText(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_TEXT);
    }

    public function isValidationFailedInvalidText(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_TEXT);
    }

    public static function validationFailedInvalidUnit(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_UNIT);
    }

    public function isValidationFailedInvalidUnit(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_UNIT);
    }

    public static function validationFailedInvalidUrl(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_URL);
    }

    public function isValidationFailedInvalidUrl(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_URL);
    }

    public static function validationFailedInvalidValues(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_INVALID_VALUES);
    }

    public function isValidationFailedInvalidValues(): bool
    {
        return $this->is(static::VALIDATION_FAILED_INVALID_VALUES);
    }

    public static function validationFailedNotAllowed(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_NOT_ALLOWED);
    }

    public function isValidationFailedNotAllowed(): bool
    {
        return $this->is(static::VALIDATION_FAILED_NOT_ALLOWED);
    }

    public static function validationFailedUnknownBasetype(): self
    {
        return (new static())->set(static::VALIDATION_FAILED_UNKNOWN_BASETYPE);
    }

    public function isValidationFailedUnknownBasetype(): bool
    {
        return $this->is(static::VALIDATION_FAILED_UNKNOWN_BASETYPE);
    }

    public static function waitingForGlobalId(): self
    {
        return (new static())->set(static::WAITING_FOR_GLOBAL_ID);
    }

    public function isWaitingForGlobalId(): bool
    {
        return $this->is(static::WAITING_FOR_GLOBAL_ID);
    }
}
