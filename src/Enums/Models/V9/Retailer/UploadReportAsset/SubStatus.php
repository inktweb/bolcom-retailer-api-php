<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Enums\Models
 */

namespace Inktweb\Bolcom\RetailerApi\Enums\Models\V9\Retailer\UploadReportAsset;

use Inktweb\Bolcom\RetailerApi\Contracts\Enum;

class SubStatus extends Enum
{
    protected const MAX_ITEMS = 1;
    public const DELETED = 'DELETED';
    public const DOWNLOAD_FAILED_404 = 'DOWNLOAD_FAILED_404';
    public const DOWNLOAD_FAILED_UNAUTHORIZED = 'DOWNLOAD_FAILED_UNAUTHORIZED';
    public const IMAGE_FLAGGED_AS_DUPLICATE = 'IMAGE_FLAGGED_AS_DUPLICATE';
    public const IMAGE_RATE_LIMITED = 'IMAGE_RATE_LIMITED';
    public const IMPORT_FAILED = 'IMPORT_FAILED';
    public const LABEL_UPDATED = 'LABEL_UPDATED';
    public const MATCH_TO_PRODUCT_FAILED = 'MATCH_TO_PRODUCT_FAILED';
    public const NOT_VALID_FOR_IMPORT = 'NOT_VALID_FOR_IMPORT';
    public const PUBLISHED = 'PUBLISHED';
    public const RECEIVED = 'RECEIVED';
    public const SCORED_OTHER_IMAGE_WON = 'SCORED_OTHER_IMAGE_WON';
    public const STORED = 'STORED';
    public const SUPPLIED_FLAGGED_AS_BLACKLISTED = 'SUPPLIED_FLAGGED_AS_BLACKLISTED';
    public const UNKNOWN = 'UNKNOWN';
    public const UNPUBLISHED = 'UNPUBLISHED';
    public const UNSUPPORTED_MIMETYPE = 'UNSUPPORTED_MIMETYPE';
    public const UPLOAD_CANCELLED = 'UPLOAD_CANCELLED';
    public const UPLOAD_DEADLINE_REACHED = 'UPLOAD_DEADLINE_REACHED';
    public const UPLOAD_FAILED = 'UPLOAD_FAILED';
    public const UPLOAD_REJECTED = 'UPLOAD_REJECTED';

    protected array $allowedValues = [
        'DELETED',
        'DOWNLOAD_FAILED_404',
        'DOWNLOAD_FAILED_UNAUTHORIZED',
        'IMAGE_FLAGGED_AS_DUPLICATE',
        'IMAGE_RATE_LIMITED',
        'IMPORT_FAILED',
        'LABEL_UPDATED',
        'MATCH_TO_PRODUCT_FAILED',
        'NOT_VALID_FOR_IMPORT',
        'PUBLISHED',
        'RECEIVED',
        'SCORED_OTHER_IMAGE_WON',
        'STORED',
        'SUPPLIED_FLAGGED_AS_BLACKLISTED',
        'UNKNOWN',
        'UNPUBLISHED',
        'UNSUPPORTED_MIMETYPE',
        'UPLOAD_CANCELLED',
        'UPLOAD_DEADLINE_REACHED',
        'UPLOAD_FAILED',
        'UPLOAD_REJECTED',
    ];

    public static function deleted(): self
    {
        return (new static())->set(static::DELETED);
    }

    public function isDeleted(): bool
    {
        return $this->is(static::DELETED);
    }

    public static function downloadFailed404(): self
    {
        return (new static())->set(static::DOWNLOAD_FAILED_404);
    }

    public function isDownloadFailed404(): bool
    {
        return $this->is(static::DOWNLOAD_FAILED_404);
    }

    public static function downloadFailedUnauthorized(): self
    {
        return (new static())->set(static::DOWNLOAD_FAILED_UNAUTHORIZED);
    }

    public function isDownloadFailedUnauthorized(): bool
    {
        return $this->is(static::DOWNLOAD_FAILED_UNAUTHORIZED);
    }

    public static function imageFlaggedAsDuplicate(): self
    {
        return (new static())->set(static::IMAGE_FLAGGED_AS_DUPLICATE);
    }

    public function isImageFlaggedAsDuplicate(): bool
    {
        return $this->is(static::IMAGE_FLAGGED_AS_DUPLICATE);
    }

    public static function imageRateLimited(): self
    {
        return (new static())->set(static::IMAGE_RATE_LIMITED);
    }

    public function isImageRateLimited(): bool
    {
        return $this->is(static::IMAGE_RATE_LIMITED);
    }

    public static function importFailed(): self
    {
        return (new static())->set(static::IMPORT_FAILED);
    }

    public function isImportFailed(): bool
    {
        return $this->is(static::IMPORT_FAILED);
    }

    public static function labelUpdated(): self
    {
        return (new static())->set(static::LABEL_UPDATED);
    }

    public function isLabelUpdated(): bool
    {
        return $this->is(static::LABEL_UPDATED);
    }

    public static function matchToProductFailed(): self
    {
        return (new static())->set(static::MATCH_TO_PRODUCT_FAILED);
    }

    public function isMatchToProductFailed(): bool
    {
        return $this->is(static::MATCH_TO_PRODUCT_FAILED);
    }

    public static function notValidForImport(): self
    {
        return (new static())->set(static::NOT_VALID_FOR_IMPORT);
    }

    public function isNotValidForImport(): bool
    {
        return $this->is(static::NOT_VALID_FOR_IMPORT);
    }

    public static function published(): self
    {
        return (new static())->set(static::PUBLISHED);
    }

    public function isPublished(): bool
    {
        return $this->is(static::PUBLISHED);
    }

    public static function received(): self
    {
        return (new static())->set(static::RECEIVED);
    }

    public function isReceived(): bool
    {
        return $this->is(static::RECEIVED);
    }

    public static function scoredOtherImageWon(): self
    {
        return (new static())->set(static::SCORED_OTHER_IMAGE_WON);
    }

    public function isScoredOtherImageWon(): bool
    {
        return $this->is(static::SCORED_OTHER_IMAGE_WON);
    }

    public static function stored(): self
    {
        return (new static())->set(static::STORED);
    }

    public function isStored(): bool
    {
        return $this->is(static::STORED);
    }

    public static function suppliedFlaggedAsBlacklisted(): self
    {
        return (new static())->set(static::SUPPLIED_FLAGGED_AS_BLACKLISTED);
    }

    public function isSuppliedFlaggedAsBlacklisted(): bool
    {
        return $this->is(static::SUPPLIED_FLAGGED_AS_BLACKLISTED);
    }

    public static function unknown(): self
    {
        return (new static())->set(static::UNKNOWN);
    }

    public function isUnknown(): bool
    {
        return $this->is(static::UNKNOWN);
    }

    public static function unpublished(): self
    {
        return (new static())->set(static::UNPUBLISHED);
    }

    public function isUnpublished(): bool
    {
        return $this->is(static::UNPUBLISHED);
    }

    public static function unsupportedMimetype(): self
    {
        return (new static())->set(static::UNSUPPORTED_MIMETYPE);
    }

    public function isUnsupportedMimetype(): bool
    {
        return $this->is(static::UNSUPPORTED_MIMETYPE);
    }

    public static function uploadCancelled(): self
    {
        return (new static())->set(static::UPLOAD_CANCELLED);
    }

    public function isUploadCancelled(): bool
    {
        return $this->is(static::UPLOAD_CANCELLED);
    }

    public static function uploadDeadlineReached(): self
    {
        return (new static())->set(static::UPLOAD_DEADLINE_REACHED);
    }

    public function isUploadDeadlineReached(): bool
    {
        return $this->is(static::UPLOAD_DEADLINE_REACHED);
    }

    public static function uploadFailed(): self
    {
        return (new static())->set(static::UPLOAD_FAILED);
    }

    public function isUploadFailed(): bool
    {
        return $this->is(static::UPLOAD_FAILED);
    }

    public static function uploadRejected(): self
    {
        return (new static())->set(static::UPLOAD_REJECTED);
    }

    public function isUploadRejected(): bool
    {
        return $this->is(static::UPLOAD_REJECTED);
    }
}
