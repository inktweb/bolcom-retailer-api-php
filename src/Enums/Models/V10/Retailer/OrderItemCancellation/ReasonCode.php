<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Enums\Models
 */

namespace Inktweb\Bolcom\RetailerApi\Enums\Models\V10\Retailer\OrderItemCancellation;

use Inktweb\Bolcom\RetailerApi\Contracts\Enum;

class ReasonCode extends Enum
{
    protected const MAX_ITEMS = 1;
    public const OUT_OF_STOCK = 'OUT_OF_STOCK';
    public const REQUESTED_BY_CUSTOMER = 'REQUESTED_BY_CUSTOMER';
    public const BAD_CONDITION = 'BAD_CONDITION';
    public const HIGHER_SHIPCOST = 'HIGHER_SHIPCOST';
    public const INCORRECT_PRICE = 'INCORRECT_PRICE';
    public const NOT_AVAIL_IN_TIME = 'NOT_AVAIL_IN_TIME';
    public const NO_BOL_GUARANTEE = 'NO_BOL_GUARANTEE';
    public const ORDERED_TWICE = 'ORDERED_TWICE';
    public const RETAIN_ITEM = 'RETAIN_ITEM';
    public const TECH_ISSUE = 'TECH_ISSUE';
    public const UNFINDABLE_ITEM = 'UNFINDABLE_ITEM';
    public const OTHER = 'OTHER';

    protected array $allowedValues = [
        'OUT_OF_STOCK',
        'REQUESTED_BY_CUSTOMER',
        'BAD_CONDITION',
        'HIGHER_SHIPCOST',
        'INCORRECT_PRICE',
        'NOT_AVAIL_IN_TIME',
        'NO_BOL_GUARANTEE',
        'ORDERED_TWICE',
        'RETAIN_ITEM',
        'TECH_ISSUE',
        'UNFINDABLE_ITEM',
        'OTHER',
    ];

    public static function outOfStock(): self
    {
        return (new static())->set(static::OUT_OF_STOCK);
    }

    public function isOutOfStock(): bool
    {
        return $this->is(static::OUT_OF_STOCK);
    }

    public static function requestedByCustomer(): self
    {
        return (new static())->set(static::REQUESTED_BY_CUSTOMER);
    }

    public function isRequestedByCustomer(): bool
    {
        return $this->is(static::REQUESTED_BY_CUSTOMER);
    }

    public static function badCondition(): self
    {
        return (new static())->set(static::BAD_CONDITION);
    }

    public function isBadCondition(): bool
    {
        return $this->is(static::BAD_CONDITION);
    }

    public static function higherShipcost(): self
    {
        return (new static())->set(static::HIGHER_SHIPCOST);
    }

    public function isHigherShipcost(): bool
    {
        return $this->is(static::HIGHER_SHIPCOST);
    }

    public static function incorrectPrice(): self
    {
        return (new static())->set(static::INCORRECT_PRICE);
    }

    public function isIncorrectPrice(): bool
    {
        return $this->is(static::INCORRECT_PRICE);
    }

    public static function notAvailInTime(): self
    {
        return (new static())->set(static::NOT_AVAIL_IN_TIME);
    }

    public function isNotAvailInTime(): bool
    {
        return $this->is(static::NOT_AVAIL_IN_TIME);
    }

    public static function noBolGuarantee(): self
    {
        return (new static())->set(static::NO_BOL_GUARANTEE);
    }

    public function isNoBolGuarantee(): bool
    {
        return $this->is(static::NO_BOL_GUARANTEE);
    }

    public static function orderedTwice(): self
    {
        return (new static())->set(static::ORDERED_TWICE);
    }

    public function isOrderedTwice(): bool
    {
        return $this->is(static::ORDERED_TWICE);
    }

    public static function retainItem(): self
    {
        return (new static())->set(static::RETAIN_ITEM);
    }

    public function isRetainItem(): bool
    {
        return $this->is(static::RETAIN_ITEM);
    }

    public static function techIssue(): self
    {
        return (new static())->set(static::TECH_ISSUE);
    }

    public function isTechIssue(): bool
    {
        return $this->is(static::TECH_ISSUE);
    }

    public static function unfindableItem(): self
    {
        return (new static())->set(static::UNFINDABLE_ITEM);
    }

    public function isUnfindableItem(): bool
    {
        return $this->is(static::UNFINDABLE_ITEM);
    }

    public static function other(): self
    {
        return (new static())->set(static::OTHER);
    }

    public function isOther(): bool
    {
        return $this->is(static::OTHER);
    }
}
