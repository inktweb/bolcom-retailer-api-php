<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Enums\Models
 */

namespace Inktweb\Bolcom\RetailerApi\Enums\Models\V10\Retailer\ReturnRequest;

use Inktweb\Bolcom\RetailerApi\Contracts\Enum;

class HandlingResult extends Enum
{
    protected const MAX_ITEMS = 1;
    public const RETURN_RECEIVED = 'RETURN_RECEIVED';
    public const EXCHANGE_PRODUCT = 'EXCHANGE_PRODUCT';
    public const RETURN_DOES_NOT_MEET_CONDITIONS = 'RETURN_DOES_NOT_MEET_CONDITIONS';
    public const REPAIR_PRODUCT = 'REPAIR_PRODUCT';
    public const CUSTOMER_KEEPS_PRODUCT_PAID = 'CUSTOMER_KEEPS_PRODUCT_PAID';
    public const STILL_APPROVED = 'STILL_APPROVED';

    protected array $allowedValues = [
        'RETURN_RECEIVED',
        'EXCHANGE_PRODUCT',
        'RETURN_DOES_NOT_MEET_CONDITIONS',
        'REPAIR_PRODUCT',
        'CUSTOMER_KEEPS_PRODUCT_PAID',
        'STILL_APPROVED',
    ];

    public static function returnReceived(): self
    {
        return (new static())->set(static::RETURN_RECEIVED);
    }

    public function isReturnReceived(): bool
    {
        return $this->is(static::RETURN_RECEIVED);
    }

    public static function exchangeProduct(): self
    {
        return (new static())->set(static::EXCHANGE_PRODUCT);
    }

    public function isExchangeProduct(): bool
    {
        return $this->is(static::EXCHANGE_PRODUCT);
    }

    public static function returnDoesNotMeetConditions(): self
    {
        return (new static())->set(static::RETURN_DOES_NOT_MEET_CONDITIONS);
    }

    public function isReturnDoesNotMeetConditions(): bool
    {
        return $this->is(static::RETURN_DOES_NOT_MEET_CONDITIONS);
    }

    public static function repairProduct(): self
    {
        return (new static())->set(static::REPAIR_PRODUCT);
    }

    public function isRepairProduct(): bool
    {
        return $this->is(static::REPAIR_PRODUCT);
    }

    public static function customerKeepsProductPaid(): self
    {
        return (new static())->set(static::CUSTOMER_KEEPS_PRODUCT_PAID);
    }

    public function isCustomerKeepsProductPaid(): bool
    {
        return $this->is(static::CUSTOMER_KEEPS_PRODUCT_PAID);
    }

    public static function stillApproved(): self
    {
        return (new static())->set(static::STILL_APPROVED);
    }

    public function isStillApproved(): bool
    {
        return $this->is(static::STILL_APPROVED);
    }
}
