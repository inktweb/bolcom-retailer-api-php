<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Endpoints
 */

namespace Inktweb\Bolcom\RetailerApi\Endpoints\V9\Retailer;

use GuzzleHttp\Exception\GuzzleException;
use Inktweb\Bolcom\RetailerApi\Contracts\Endpoint;
use Inktweb\Bolcom\RetailerApi\Exceptions\ApiException;
use Inktweb\Bolcom\RetailerApi\Exceptions\Enum\UnknownCollectionFormatException;
use Inktweb\Bolcom\RetailerApi\Exceptions\UnexpectedResponseContentTypeException;
use Inktweb\Bolcom\RetailerApi\Models\V9\Retailer\CreateSubscriptionRequest;
use Inktweb\Bolcom\RetailerApi\Models\V9\Retailer\KeySetResponse;
use Inktweb\Bolcom\RetailerApi\Models\V9\Retailer\Problem;
use Inktweb\Bolcom\RetailerApi\Models\V9\Retailer\ProcessStatus;
use Inktweb\Bolcom\RetailerApi\Models\V9\Retailer\SubscriptionResponse;
use Inktweb\Bolcom\RetailerApi\Models\V9\Retailer\SubscriptionsResponse;
use Inktweb\Bolcom\RetailerApi\Models\V9\Retailer\UpdateSubscriptionRequest;

final class Subscriptions extends Endpoint
{
    /**
     * Get push notification subscriptions.
     *
     * Retrieve a list of all configured and active push notification
     * subscriptions.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getPushNotificationSubscriptions(): SubscriptionsResponse
    {
        return SubscriptionsResponse::fromArray(
            $this->request(
                'get',
                'subscriptions',
                [],
                [],
                null,
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Create push notification subscription.
     *
     * Create a push notification subscription for one (or more) of the
     * available resources. The configured URL has to support https scheme.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function postPushNotificationSubscription(CreateSubscriptionRequest $body): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'post',
                'subscriptions',
                [],
                [],
                $body,
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Retrieve public keys for push notification signature validation.
     *
     * Retrieve a list of public keys that should be used to validate the
     * signature header for push notifications received from bol.com.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getSubscriptionKeys(): KeySetResponse
    {
        return KeySetResponse::fromArray(
            $this->request(
                'get',
                'subscriptions/signature-keys',
                [],
                [],
                null,
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    'application/vnd.retailer.v9+json',
                ],
                []
            )->getBody()->getJson()
        );
    }

    /**
     * Send test push notification for subscriptions.
     *
     * Send a test push notification to all subscriptions for the provided
     * event.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function postTestPushNotification(string $subscriptionId): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'post',
                'subscriptions/test/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                null,
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Get push notification subscription by id.
     *
     * Retrieve a configured and active push notification subscription with
     * the provided id.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getPushNotificationSubscription(string $subscriptionId): SubscriptionResponse
    {
        return SubscriptionResponse::fromArray(
            $this->request(
                'get',
                'subscriptions/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                null,
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    404 => Problem::class,
                    400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Update push notification subscription.
     *
     * Update an existing push notification subscription with the supplied
     * id. The configured URL has to support https scheme.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function putPushNotificationSubscription(
        string $subscriptionId,
        UpdateSubscriptionRequest $body
    ): ProcessStatus {
        return ProcessStatus::fromArray(
            $this->request(
                'put',
                'subscriptions/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                $body,
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Delete push notification subscription.
     *
     * Delete a push notification subscription with the provided id.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function deletePushNotificationSubscription(string $subscriptionId): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'delete',
                'subscriptions/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                null,
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    'application/vnd.retailer.v9+json',
                ],
                [
                    400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }
}
