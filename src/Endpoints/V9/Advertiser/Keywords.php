<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Endpoints
 */

namespace Inktweb\Bolcom\RetailerApi\Endpoints\V9\Advertiser;

use GuzzleHttp\Exception\GuzzleException;
use Inktweb\Bolcom\RetailerApi\Contracts\Endpoint;
use Inktweb\Bolcom\RetailerApi\Exceptions\ApiException;
use Inktweb\Bolcom\RetailerApi\Exceptions\Enum\UnknownCollectionFormatException;
use Inktweb\Bolcom\RetailerApi\Exceptions\UnexpectedResponseContentTypeException;
use Inktweb\Bolcom\RetailerApi\Models\V9\Advertiser\CreateKeywordRequest;
use Inktweb\Bolcom\RetailerApi\Models\V9\Advertiser\Keyword;
use Inktweb\Bolcom\RetailerApi\Models\V9\Advertiser\KeywordsResponse;
use Inktweb\Bolcom\RetailerApi\Models\V9\Advertiser\Problem;
use Inktweb\Bolcom\RetailerApi\Models\V9\Advertiser\ProcessStatus;
use Inktweb\Bolcom\RetailerApi\Models\V9\Advertiser\UpdateKeywordRequest;

final class Keywords extends Endpoint
{
    /**
     * Get a list of keywords.
     *
     * Gets a paginated list of all keywords that are present within an ad
     * group.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getKeywords(string $adGroupId, ?int $page = null): KeywordsResponse
    {
        return KeywordsResponse::fromArray(
            $this->request(
                'get',
                '/advertiser/sponsored-products/keywords',
                [],
                [
                'ad-group-id' => $adGroupId,
                'page' => $page,
                ],
                null,
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Create a keyword.
     *
     * Creates a keyword and adds it to an ad group.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function createKeyword(CreateKeywordRequest $body): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'post',
                '/advertiser/sponsored-products/keywords',
                [],
                [],
                $body,
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Get a keyword by keyword id.
     *
     * Gets the details of a keyword.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getKeyword(string $keywordId): Keyword
    {
        return Keyword::fromArray(
            $this->request(
                'get',
                '/advertiser/sponsored-products/keywords/{keyword-id}',
                [
                'keyword-id' => $keywordId,
                ],
                [],
                null,
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Update a keyword by keyword id.
     *
     * Updates a keyword.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function putKeyword(string $keywordId, UpdateKeywordRequest $body): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'put',
                '/advertiser/sponsored-products/keywords/{keyword-id}',
                [
                'keyword-id' => $keywordId,
                ],
                [],
                $body,
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Delete a keyword by keyword id.
     *
     * Deletes a single keyword.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function deleteKeyword(string $keywordId): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'delete',
                '/advertiser/sponsored-products/keywords/{keyword-id}',
                [
                'keyword-id' => $keywordId,
                ],
                [],
                null,
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                'application/vnd.advertiser.v9+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }
}
