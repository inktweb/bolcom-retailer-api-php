<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Endpoints
 */

namespace Inktweb\Bolcom\RetailerApi\Endpoints\V7\Advertiser;

use GuzzleHttp\Exception\GuzzleException;
use Inktweb\Bolcom\RetailerApi\Contracts\Endpoint;
use Inktweb\Bolcom\RetailerApi\Exceptions\ApiException;
use Inktweb\Bolcom\RetailerApi\Exceptions\Enum\UnknownCollectionFormatException;
use Inktweb\Bolcom\RetailerApi\Exceptions\UnexpectedResponseContentTypeException;
use Inktweb\Bolcom\RetailerApi\Models\V7\Advertiser\CampaignsResponse;
use Inktweb\Bolcom\RetailerApi\Models\V7\Advertiser\CreateCampaignRequest;
use Inktweb\Bolcom\RetailerApi\Models\V7\Advertiser\Problem;
use Inktweb\Bolcom\RetailerApi\Models\V7\Advertiser\ProcessStatus;
use Inktweb\Bolcom\RetailerApi\Models\V7\Advertiser\SingleCampaignResponse;
use Inktweb\Bolcom\RetailerApi\Models\V7\Advertiser\UpdateCampaignRequest;

final class Campaigns extends Endpoint
{
    /**
     * Get a list of campaigns.
     *
     * Gets a paginated list of all campaigns for an advertiser.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getCampaigns(?int $page = null): CampaignsResponse
    {
        return CampaignsResponse::fromArray(
            $this->request(
                'get',
                '/advertiser/sponsored-products/campaigns',
                [],
                [
                'page' => $page,
                ],
                null,
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Create a campaign.
     *
     * Creates a campaign.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function postCampaign(CreateCampaignRequest $body): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'post',
                '/advertiser/sponsored-products/campaigns',
                [],
                [],
                $body,
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Get a campaign by campaign id.
     *
     * Gets the details of a campaign.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getCampaign(string $campaignId): SingleCampaignResponse
    {
        return SingleCampaignResponse::fromArray(
            $this->request(
                'get',
                '/advertiser/sponsored-products/campaigns/{campaign-id}',
                [
                'campaign-id' => $campaignId,
                ],
                [],
                null,
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                400 => Problem::class,
                404 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Update a campaign by campaign id.
     *
     * Updates a campaign.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function putCampaign(string $campaignId, UpdateCampaignRequest $body): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'put',
                '/advertiser/sponsored-products/campaigns/{campaign-id}',
                [
                'campaign-id' => $campaignId,
                ],
                [],
                $body,
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                'application/vnd.advertiser.v7+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }
}
