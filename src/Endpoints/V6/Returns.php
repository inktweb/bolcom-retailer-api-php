<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Endpoints
 */

namespace Inktweb\Bolcom\RetailerApi\Endpoints\V6;

use Inktweb\Bolcom\RetailerApi\Contracts\Endpoint;
use Inktweb\Bolcom\RetailerApi\Enums\Endpoints\V6\Returns\FulfilmentMethod;
use Inktweb\Bolcom\RetailerApi\Models\V6\CreateReturnRequest;
use Inktweb\Bolcom\RetailerApi\Models\V6\Problem;
use Inktweb\Bolcom\RetailerApi\Models\V6\ProcessStatus;
use Inktweb\Bolcom\RetailerApi\Models\V6\ReturnMerchandise;
use Inktweb\Bolcom\RetailerApi\Models\V6\ReturnRequest;
use Inktweb\Bolcom\RetailerApi\Models\V6\ReturnsResponse;

final class Returns extends Endpoint
{
    /**
     * Get returns.
     *
     * Get a paginated list of multi-item returns. Handled returns are sorted
     * by date in descending order, while unhandled returns are sorted by
     * date in ascending order.
     */
    public function getReturns(
        ?int $page = null,
        ?bool $handled = null,
        ?FulfilmentMethod $fulfilmentMethod = null
    ): ReturnsResponse {
        return ReturnsResponse::fromArray(
            $this->request(
                'get',
                'returns',
                [],
                [
                'page' => $page,
                'handled' => $handled,
                'fulfilment-method' => $fulfilmentMethod,
                ],
                null,
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Create a return.
     *
     * Create a return, and automatically handle it with the provided
     * handling result. When successfully created, the resulting return id is
     * provided in the process status.
     */
    public function createReturn(CreateReturnRequest $body): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'post',
                'returns',
                [],
                [],
                $body,
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Get a return by return id.
     *
     * Retrieve a return based on the return id.
     */
    public function getReturn(string $returnId): ReturnMerchandise
    {
        return ReturnMerchandise::fromArray(
            $this->request(
                'get',
                'returns/{return-id}',
                [
                'return-id' => $returnId,
                ],
                [],
                null,
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                404 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }

    /**
     * Handle a return by rma id.
     *
     * Allows the user to handle a return. This can be to either handle an
     * open return, or change the handlingResult of an already handled
     * return. Please refer to the Returns documentation for further details.
     */
    public function handleReturn(int $rmaId, ReturnRequest $body): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'put',
                'returns/{rma-id}',
                [
                'rma-id' => $rmaId,
                ],
                [],
                $body,
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                'application/vnd.retailer.v6+json',
                ],
                [
                400 => Problem::class,
                ]
            )->getBody()->getJson()
        );
    }
}
