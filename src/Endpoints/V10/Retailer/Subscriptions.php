<?php

/**
 * This file is auto-generated by
 * Inktweb\Bolcom\RetailerApi\Development\Generator\Endpoints
 */

namespace Inktweb\Bolcom\RetailerApi\Endpoints\V10\Retailer;

use GuzzleHttp\Exception\GuzzleException;
use Inktweb\Bolcom\RetailerApi\Contracts\Endpoint;
use Inktweb\Bolcom\RetailerApi\Exceptions\ApiException;
use Inktweb\Bolcom\RetailerApi\Exceptions\Enum\UnknownCollectionFormatException;
use Inktweb\Bolcom\RetailerApi\Exceptions\UnexpectedResponseContentTypeException;
use Inktweb\Bolcom\RetailerApi\Models\V10\Retailer\KeySetResponse;
use Inktweb\Bolcom\RetailerApi\Models\V10\Retailer\Problem;
use Inktweb\Bolcom\RetailerApi\Models\V10\Retailer\ProcessStatus;
use Inktweb\Bolcom\RetailerApi\Models\V10\Retailer\SubscriptionRequest;
use Inktweb\Bolcom\RetailerApi\Models\V10\Retailer\SubscriptionResponse;
use Inktweb\Bolcom\RetailerApi\Models\V10\Retailer\SubscriptionsResponse;

final class Subscriptions extends Endpoint
{
    /**
     * Retrieve Event Notification Subscriptions.
     *
     * Retrieves all event notification subscriptions for a given retailer.
     * Each subscription may have different types of events and a
     * destination, which could either be a URL (for WEBHOOK) or a topic name
     * (for GCP_PUBSUB).
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getPushNotificationSubscriptions(): SubscriptionsResponse
    {
        return SubscriptionsResponse::fromArray(
            $this->request(
                'get',
                'subscriptions',
                [],
                [],
                null,
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    400 => Problem::class,
                ],
                [],
                null
            )->getBody()->getJson()
        );
    }

    /**
     * Create Event Notification Subscription.
     *
     * Creates a new event notification subscription for a retailer. The
     * subscription can be set up for one or more types of events and the
     * destination can either be a URL (for WEBHOOK) or a topic name (for
     * GCP_PUBSUB).
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function postPushNotificationSubscription(SubscriptionRequest $subscriptionRequest): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'post',
                'subscriptions',
                [],
                [],
                $subscriptionRequest,
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    400 => Problem::class,
                ],
                [],
                null
            )->getBody()->getJson()
        );
    }

    /**
     * Retrieve public keys for push notification signature validation.
     *
     * Retrieve a list of public keys that should be used to validate the
     * signature header for push notifications received from bol.com.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getSubscriptionKeys(): KeySetResponse
    {
        return KeySetResponse::fromArray(
            $this->request(
                'get',
                'subscriptions/signature-keys',
                [],
                [],
                null,
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    'application/vnd.retailer.v10+json',
                ],
                [],
                [],
                null
            )->getBody()->getJson()
        );
    }

    /**
     * Send test push notification for subscriptions.
     *
     * Send a test push notification to all subscriptions for the provided
     * event.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function postTestPushNotification(string $subscriptionId): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'post',
                'subscriptions/test/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                null,
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    400 => Problem::class,
                ],
                [],
                null
            )->getBody()->getJson()
        );
    }

    /**
     * Retrieve Specific Event Notification Subscription.
     *
     * Fetches the details of a specific event notification subscription for
     * a retailer. The details include the types of events and the
     * destination, which can either be a URL (for WEBHOOK) or a topic name
     * (for GCP_PUBSUB).
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function getPushNotificationSubscription(string $subscriptionId): SubscriptionResponse
    {
        return SubscriptionResponse::fromArray(
            $this->request(
                'get',
                'subscriptions/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                null,
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    404 => Problem::class,
                    400 => Problem::class,
                ],
                [],
                null
            )->getBody()->getJson()
        );
    }

    /**
     * Update Event Notification Subscription.
     *
     * Updates the details of a specific event notification subscription for
     * a retailer. The updates can be made to the types of events and/or the
     * destination, which can either be a URL (for WEBHOOK) or a topic name
     * (for GCP_PUBSUB).
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function putPushNotificationSubscription(
        string $subscriptionId,
        SubscriptionRequest $subscriptionRequest
    ): ProcessStatus {
        return ProcessStatus::fromArray(
            $this->request(
                'put',
                'subscriptions/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                $subscriptionRequest,
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    400 => Problem::class,
                ],
                [],
                null
            )->getBody()->getJson()
        );
    }

    /**
     * Remove Event Notification Subscription.
     *
     * Deletes a specific event notification subscription associated with a
     * retailer.
     *
     * @throws ApiException
     * @throws GuzzleException
     * @throws UnexpectedResponseContentTypeException
     * @throws UnknownCollectionFormatException
     */
    public function deletePushNotificationSubscription(string $subscriptionId): ProcessStatus
    {
        return ProcessStatus::fromArray(
            $this->request(
                'delete',
                'subscriptions/{subscription-id}',
                [
                    'subscription-id' => $subscriptionId,
                ],
                [],
                null,
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    'application/vnd.retailer.v10+json',
                ],
                [
                    400 => Problem::class,
                ],
                [],
                null
            )->getBody()->getJson()
        );
    }
}
